apiVersion: batch/v1
kind: Job
metadata:
  name: data-test-replica-community
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: data-test
        env:
          - name: DB_URI
            valueFrom:
              secretKeyRef:
                name: replica-paradedb-superuser
                key: uri
          - name: REPLICA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: replica-paradedb-superuser
                key: password
          - name: SOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: source-paradedb-superuser
                key: password
        image: alpine:3.19
        command: ['sh', '-c']
        args:
         - |
           set -e
           apk --no-cache add postgresql-client
           DB_URI=$(echo $DB_URI | sed "s|/\*|/|" )
           DB_URI=$(echo $DB_URI | sed "s|$REPLICA_PASSWORD|$SOURCE_PASSWORD|" )
           
           echo "Testing Community Edition - expecting error for reading from standby..."
           
           # This query should fail with Enterprise-only error
           ERROR_OUTPUT=$(psql "${DB_URI}paradedb" -t -c "SELECT description FROM mock_items_paradedb_enterprise WHERE description @@@ '\"bluetooth speaker\"~1' LIMIT 1;" 2>&1 || true)
           
           echo "Query output: $ERROR_OUTPUT"
           
           if echo "$ERROR_OUTPUT" | grep -q "Serving reads from a standby requires write-ahead log (WAL) integration"; then
             echo "SUCCESS: Got expected error message for Community edition reading from standby"
             exit 0
           else
             echo "FAILURE: Did not get expected error message"
             echo "Full output: $ERROR_OUTPUT"
             exit 1
           fi
