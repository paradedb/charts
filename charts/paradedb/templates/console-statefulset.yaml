{{- if .Values.cluster.console.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cluster.fullname" $ }}-console
  namespace: {{ include "cluster.namespace" $ }}
  {{- with .Values.cluster.annotations }}
  annotations:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  labels:
    {{- include "cluster.labels" . | nindent 4 }}
    {{- with .Values.cluster.additionalLabels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    app.kubernetes.io/component: console
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "cluster.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: console
  serviceName: console
  volumeClaimTemplates:
    - metadata:
        name: console-home
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
  template:
    metadata:
      {{- with .Values.cluster.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cluster.labels" . | nindent 8 }}
        {{- with .Values.cluster.additionalLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        app.kubernetes.io/component: console
    spec:
      terminationGracePeriodSeconds: 2
      containers:
        - name: console
          image: ubuntu:latest
          command: [ "sh" ]
          args:
            - "-c"
            - |
              apt update
              apt install -y postgresql-client
              apt install -y screen curl wget jq unzip gzip nano vim util-linux less htop build-essential pkg-config libssl-dev tmux libfontconfig1-dev
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source /root/.cargo/env
              # Create symlinks for universal access
              ln -sf /root/.cargo/bin/* /usr/local/bin/
              cat <<EOF > /root/.bashrc
              # Source cargo environment for universal access
              source /root/.cargo/env

              echo -e "\nHere are some examples for connecting and running queries on the cluster:"
              echo '  nohup psql \$DB_SUPERUSER_URI"/DB_NAME" -c "SELECT 1;" 2>&1 > command.log &'
              echo -e "\nTo check up on the command, use:"
              echo "  tail -f command.log"
              echo -e "\nYou can also use 'screen' for an interactive session. See https://github.com/paradedb/charts/blob/dev/charts/paradedb/docs/long-running-tasks.md for examples."
              echo -e "\n"
              EOF
              sleep infinity
          env:
            - name: DB_APP_URI
              valueFrom:
                secretKeyRef:
                  name: {{ include "cluster.fullname" $ }}-app
                  key: uri
            - name: DB_SUPERUSER_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "cluster.fullname" $ }}-superuser
                  key: host
            - name: DB_SUPERUSER_PORT
              valueFrom:
                  secretKeyRef:
                    name: {{ include "cluster.fullname" $ }}-superuser
                    key: port
            - name: DB_SUPERUSER_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "cluster.fullname" $ }}-superuser
                  key: user
            - name: DB_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "cluster.fullname" $ }}-superuser
                  key: password
            - name: DB_SUPERUSER_URI
              value: "postgresql://$(DB_SUPERUSER_USER):$(DB_SUPERUSER_PASSWORD)@$(DB_SUPERUSER_HOST):$(DB_SUPERUSER_PORT)"
          volumeMounts:
            - name: console-home
              mountPath: /root
{{- end }}
