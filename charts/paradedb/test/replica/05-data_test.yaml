apiVersion: batch/v1
kind: Job
metadata:
  name: data-test-replica
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 600
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: data-test
        image: alpine:3.19
        env:
        - name: DB_URI
          valueFrom:
            secretKeyRef:
              name: replica-paradedb-superuser
              key: uri    # postgres://postgres:<pass>@replica-paradedb-rw:5432/*
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command: ["/bin/sh","-c"]
        args:
        - |
          set -eu
          apk --no-cache add postgresql-client

          # Normalize: strip any trailing path or "/*", ensure a single slash
          BASE_URI="${DB_URI%/*}/"
          BASE_URI="${BASE_URI%/*}/"

          # Wait for SQL using the secret URI (has the right password)
          i=0
          until psql "${BASE_URI}postgres" -c "select 1" >/dev/null 2>&1; do
            i=$((i+1))
            [ "$i" -le 120 ] || { echo "replica never accepted SQL with secret URI"; exit 1; }
            echo "waiting for DB with secret URI... ($i/120)"
            sleep 2
          done

          PSQLOPTS="-A -t -q"

          # Sanity: whoami
          CURR_USER="$(psql $PSQLOPTS "${BASE_URI}postgres" -c 'select current_user;')"
          echo "current_user=<${CURR_USER}>"

          # Table exists on replica
          HAS_TABLE="$(psql $PSQLOPTS "${BASE_URI}mygooddb" \
            -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'mygoodtable');")"
          [ "$HAS_TABLE" = "t" ] || { echo "table mygoodtable not visible on replica"; exit 1; }

          # BM25 query
          RESULT="$(printf '%s\n' \
            "SELECT description" \
            "FROM mock_items_paradedb_enterprise" \
            "WHERE description @@@ '\"bluetooth speaker\"~1'" \
            "LIMIT 1;" \
            | psql $PSQLOPTS "${BASE_URI}paradedb")"
          echo "RESULT=<${RESULT}>"
          [ "$RESULT" = "Bluetooth-enabled speaker" ] || { echo "BM25 query mismatch"; exit 1; }

          # Index size > 0
          SIZE_RESULT="$(printf '%s\n' \
            "SELECT pg_size_pretty(pg_relation_size('search_idx_paradedb_enterprise'));" \
            | psql $PSQLOPTS "${BASE_URI}paradedb")"
          echo "SIZE_RESULT=<${SIZE_RESULT}>"
          [ "$SIZE_RESULT" != "0 bytes" ] || { echo "Index size is 0"; exit 1; }
